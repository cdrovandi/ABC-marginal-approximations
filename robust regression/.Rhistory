file_name <- paste0(ws_file_prefix, worksheet_number, ".Rmd")
out_name <- paste0(ws_file_prefix, worksheet_number,".pdf")
ws_dir <- paste(path_to_ws, upper_dir, sep = "/")
# render questions and solutions
render_qands(dir = ws_dir,
rmd_file = file_name,
out_file = out_name,
knitr_params = knitr_params
)
####
worksheet_number <- "07"
upper_dir <- paste0("ws",worksheet_number)
file_name <- paste0(ws_file_prefix, worksheet_number, ".Rmd")
out_name <- paste0(ws_file_prefix, worksheet_number,".pdf")
ws_dir <- paste(path_to_ws, upper_dir, sep = "/")
# render questions and solutions
render_qands(dir = ws_dir,
rmd_file = file_name,
out_file = out_name,
knitr_params = knitr_params
)
####
install.packages("linl")
install.packages("BSL")
library(BSL)
qnorm(0.01)
980 + 20*2.326348
28597*1.5*0.35
28597*1.5*0.65
?BSL
library(BSL)
?BSL
log(0.05/(1-0.01))
log(0.05)/log(1-0.01)
log(0.1)/log(1-0.01)
log(0.2)/log(1-0.01)
log(0.01)/log(0.99)
log(0.01)/log(0.9)
log(0.01)/log(0.95)
setwd("C:/Users/drovandi/Dropbox (QUT)/1 Research/ABC Research/Marginal Adjustment/gandk/New R Code")
# distance function calculation using all summaries
distance <- function(theta, extra_args){
N = extra_args$N
X = extra_args$X
p = extra_args$p
ys <- rnorm(N, X%*%as.matrix(theta[1:p]), exp(theta[p+1]))
sim_summ = compute_statistics(ys, extra_args)
dist <- sum((extra_args$obs_summ - sim_summ)^2)
ret$dist = dist
if (extra_args$return_summ = TRUE){
ret$sim_summ
}
return(ret)
}
# distance function calculation using all summaries
distance <- function(theta, extra_args){
N = extra_args$N
X = extra_args$X
p = extra_args$p
ys <- rnorm(N, X%*%as.matrix(theta[1:p]), exp(theta[p+1]))
sim_summ = compute_statistics(ys, extra_args)
dist <- sum((extra_args$obs_summ - sim_summ)^2)
ret$dist = dist
if (extra_args$return_summ = TRUE){
ret$sim_summ = sim_summ
}
return(ret)
}
# distance function calculation using all summaries
distance <- function(theta, extra_args){
N = extra_args$N
X = extra_args$X
p = extra_args$p
ys <- rnorm(N, X%*%as.matrix(theta[1:p]), exp(theta[p+1]))
sim_summ = compute_statistics(ys, extra_args)
dist <- sum((extra_args$obs_summ - sim_summ)^2)
ret$dist = dist
if (extra_args$return_summ == TRUE){
ret$sim_summ = sim_summ
}
return(ret)
}
a$x = 2
a = list()
a$x = 2
library(MASS)
library(brlm)
library(MCMCpack)
library(tidyverse)
library(mvtnorm)
library(invgamma)
library(ggplot2)
library(gridExtra)
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
State_keep = 27
trend_prior <- sqrt_count_2010 ~ sqrt_count_2008 - 1 +
Associate_Count +
Office_Employee_Count
trend <- sqrt_count_2012 ~ sqrt_count_2010 - 1 +
Associate_Count +
Office_Employee_Count
prior_data <- read_rds('prior_data.rds')
prior_data <- prior_data %>%
mutate(sqrt_count_2008 = sqrt(Count_2008),
sqrt_count_2010 = sqrt(Count_2010))  %>%
filter(State == State_keep, Type == 1, Count_2010 > 0)
# pooled regression analysis ----
prior_fit <- MASS::rlm(trend_prior,
scale.est = 'Huber',
data =  prior_data, maxit = 100)
analysis_data <- read_rds('analysis_data.rds')
analysis_data <- analysis_data %>%
mutate(sqrt_count_2010 = sqrt(Count_2010),
sqrt_count_2012 = sqrt(Count_2012)) %>%
filter(State == State_keep)
N <- nrow(analysis_data)
p <- length(coef(prior_fit))
# prior hyperparameters
beta_0 <- coef(prior_fit)
sigma_beta_0 <- vcov(prior_fit)
var_scalar <- floor(nrow(prior_data))
var_beta_0 <- var_scalar*sigma_beta_0
sigma2_hat <- prior_fit$s^2
a_0 <- 5
b_0 <- sigma2_hat*(a_0 - 1)
X = cbind(analysis_data$sqrt_count_2010, analysis_data$Associate_Count, analysis_data$Office_Employee_Count)
y = analysis_data$sqrt_count_2012
setwd("C:/Users/drovandi/Dropbox (QUT)/1 Research/ABC Research/Marginal Adjustment/robust regression")
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
State_keep = 27
trend_prior <- sqrt_count_2010 ~ sqrt_count_2008 - 1 +
Associate_Count +
Office_Employee_Count
trend <- sqrt_count_2012 ~ sqrt_count_2010 - 1 +
Associate_Count +
Office_Employee_Count
prior_data <- read_rds('prior_data.rds')
prior_data <- prior_data %>%
mutate(sqrt_count_2008 = sqrt(Count_2008),
sqrt_count_2010 = sqrt(Count_2010))  %>%
filter(State == State_keep, Type == 1, Count_2010 > 0)
# pooled regression analysis ----
prior_fit <- MASS::rlm(trend_prior,
scale.est = 'Huber',
data =  prior_data, maxit = 100)
analysis_data <- read_rds('analysis_data.rds')
analysis_data <- analysis_data %>%
mutate(sqrt_count_2010 = sqrt(Count_2010),
sqrt_count_2012 = sqrt(Count_2012)) %>%
filter(State == State_keep)
N <- nrow(analysis_data)
p <- length(coef(prior_fit))
# prior hyperparameters
beta_0 <- coef(prior_fit)
sigma_beta_0 <- vcov(prior_fit)
var_scalar <- floor(nrow(prior_data))
var_beta_0 <- var_scalar*sigma_beta_0
sigma2_hat <- prior_fit$s^2
a_0 <- 5
b_0 <- sigma2_hat*(a_0 - 1)
X = cbind(analysis_data$sqrt_count_2010, analysis_data$Associate_Count, analysis_data$Office_Employee_Count)
y = analysis_data$sqrt_count_2012
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance,extra_args)
save(file="results_summ.RData", results)
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance,extra_args)
save(file="results_summ.RData", results)
plot(density(results$ssx[,1]))
plot(density(results$dist))
plot(density(results$ssx[,1]))
plot(density(results$ssx[,1]))
plot(density(results$ssx[,2]))
plot(density(results$ssx[,3]))
plot(density(results$ssx[,4]))
plot(density(results$theta[,1]))
plot(density(results$ssx[,1]))
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance,extra_args)
save(file="results_summ.RData", results)
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance,extra_args)
save(file="results_summ.RData", results)
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance,extra_args)
save(file="results_summ.RData", results)
plot(density(results$ssx[,1]))
plot(density(results$ssx[,2]))
plot(density(results$ssx[,3]))
plot(density(results$ssx[,4]))
############ SMC ABC with all summaries (pilot) ###############
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.2,prior_sim_trans,prior_eval,distance,extra_args)
save(file="results_summ_pilot.RData", results)
############ SMC ABC with first summary ###############
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
save(file="results_summ1.RData", results)
############ SMC ABC with second summary ###############
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[2]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance2,extra_args)
save(file="results_summ2.RData", results)
############ SMC ABC with third summary ###############
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[3]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance3,extra_args)
save(file="results_summ3.RData", results)
############ SMC ABC with fourth summary ###############
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[4]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance4,extra_args)
save(file="results_summ4.RData", results)
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
length(obs_summ)
a = matrix(0, nrow = 10, ncol = 1)
a
a[1,] = 5
a
a
ind = sample(1:5, 5, replace = TRUE)
a[ind,]
a
b = a
b[6:10,] = a[ind,]
ind
b
length(extra_args$obs_summ)
a[ind,]
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
?print
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
(N_keep+1):N
(N_keep+1):N
N_keep
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
N_keep
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
ssx[(N_keep+1):N,]
ssx
dim(ssx)
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
dim(ssx)
ssx[sort_dist$ix,]
dim(ssx[sort_dist$ix,])
dim(as.matrix(ssx[sort_dist$ix,]))
ssx = as.matrix(ssx[sort_dist$ix,])
dist_next = dist[N_keep] # adaptively determine next distance
sprintf("the next ABC tolerance is %s", dist_next)
# resampling
ind = sample(1:N_keep, N_drop, replace = TRUE)
dist[(N_keep+1):N] = dist[ind]
theta[(N_keep+1):N,] = theta[ind,]
dim(ssz)
dim(ssx)
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
dim(ssx)
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[1]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,extra_args)
save(file="results_summ1.RData", results)
plot(density(results$theta))
plot(density(results$theta[,1]))
plot(density(results$theta[,2]))
plot(density(results$theta[,3]))
plot(density(results$theta[,4]))
############ SMC ABC with second summary ###############
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[2]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance2,extra_args)
save(file="results_summ2.RData", results)
############ SMC ABC with third summary ###############
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[3]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance3,extra_args)
save(file="results_summ3.RData", results)
############ SMC ABC with fourth summary ###############
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
obs_summ = obs_summ[4]
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.01,prior_sim_trans,prior_eval,distance4,extra_args)
save(file="results_summ4.RData", results)
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ = compute_statistics(y, extra_args)
extra_args$obs_summ = obs_summ
results = smc_abc_generic(1000,0.5,0.25,prior_sim_trans,prior_eval,distance,extra_args)
save(file="results_summ_pilot.RData", results)
plot(density(results$theta[,1]))
plot(density(results$theta[,2]))
plot(density(results$theta[,3]))
plot(density(results$theta[,4]))
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
load("results_summ_pilot.RData")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ_pilot = compute_statistics(y, extra_args)
obs_summ = compute_statistics1(y, extra_args)
dist_pilot = max(results$dist)
extra_args$obs_summ_pilot = obs_summ_pilot
extra_args$obs_summ = obs_summ
extra_args$dist_pilot = dist_pilot
results = smc_abc_generic_continue(results$theta,1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,distance_pilot1,extra_args)
plot(density(results$theta[,1]))
source("auxiliary_functions.R")
source("smc_abc_generic.R")
source("smc_abc_generic_continue.R")
############ SMC ABC with first summary using pilot run ###############
load("results_summ_pilot.RData")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ_pilot = compute_statistics(y, extra_args)
obs_summ = compute_statistics1(y, extra_args)
dist_pilot = max(results$dist)
extra_args$obs_summ_pilot = obs_summ_pilot
extra_args$obs_summ = obs_summ
extra_args$dist_pilot = dist_pilot
results = smc_abc_generic_continue(results$theta,1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,distance_pilot1,extra_args)
save(results, file = "results_summ1_continue.RData")
############ SMC ABC with second summary using pilot run ###############
load("results_summ_pilot.RData")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ_pilot = compute_statistics(y, extra_args)
obs_summ = compute_statistics2(y, extra_args)
dist_pilot = max(results$dist)
extra_args$obs_summ_pilot = obs_summ_pilot
extra_args$obs_summ = obs_summ
extra_args$dist_pilot = dist_pilot
results = smc_abc_generic_continue(results$theta,1000,0.5,0.01,prior_sim_trans,prior_eval,distance2,distance_pilot2,extra_args)
save(results, file = "results_summ2_continue.RData")
############ SMC ABC with third summary using pilot run ###############
load("results_summ_pilot.RData")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ_pilot = compute_statistics(y, extra_args)
obs_summ = compute_statistics3(y, extra_args)
dist_pilot = max(results$dist)
extra_args$obs_summ_pilot = obs_summ_pilot
extra_args$obs_summ = obs_summ
extra_args$dist_pilot = dist_pilot
results = smc_abc_generic_continue(results$theta,1000,0.5,0.01,prior_sim_trans,prior_eval,distance3,distance_pilot3,extra_args)
save(results, file = "results_summ3_continue.RData")
############ SMC ABC with fourth summary using pilot run ###############
load("results_summ_pilot.RData")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ_pilot = compute_statistics(y, extra_args)
obs_summ = compute_statistics4(y, extra_args)
dist_pilot = max(results$dist)
extra_args$obs_summ_pilot = obs_summ_pilot
extra_args$obs_summ = obs_summ
extra_args$dist_pilot = dist_pilot
results = smc_abc_generic_continue(results$theta,1000,0.5,0.01,prior_sim_trans,prior_eval,distance4,distance_pilot4,extra_args)
save(results, file = "results_summ4_continue.RData")
############ SMC ABC with second summary using pilot run ###############
load("results_summ_pilot.RData")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ_pilot = compute_statistics(y, extra_args)
obs_summ = compute_statistics2(y, extra_args)
dist_pilot = max(results$dist)
extra_args$obs_summ_pilot = obs_summ_pilot
extra_args$obs_summ = obs_summ
extra_args$dist_pilot = dist_pilot
results = smc_abc_generic_continue(results$theta,1000,0.5,0.01,prior_sim_trans,prior_eval,distance2,distance_pilot2,extra_args)
save(results, file = "results_summ2_continue.RData")
############ SMC ABC with third summary using pilot run ###############
load("results_summ_pilot.RData")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ_pilot = compute_statistics(y, extra_args)
obs_summ = compute_statistics3(y, extra_args)
dist_pilot = max(results$dist)
extra_args$obs_summ_pilot = obs_summ_pilot
extra_args$obs_summ = obs_summ
extra_args$dist_pilot = dist_pilot
results = smc_abc_generic_continue(results$theta,1000,0.5,0.01,prior_sim_trans,prior_eval,distance3,distance_pilot3,extra_args)
save(results, file = "results_summ3_continue.RData")
############ SMC ABC with fourth summary using pilot run ###############
load("results_summ_pilot.RData")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ_pilot = compute_statistics(y, extra_args)
obs_summ = compute_statistics4(y, extra_args)
dist_pilot = max(results$dist)
extra_args$obs_summ_pilot = obs_summ_pilot
extra_args$obs_summ = obs_summ
extra_args$dist_pilot = dist_pilot
results = smc_abc_generic_continue(results$theta,1000,0.5,0.01,prior_sim_trans,prior_eval,distance4,distance_pilot4,extra_args)
save(results, file = "results_summ4_continue.RData")
############ SMC ABC with first summary using pilot run ###############
load("results_summ_pilot.RData")
extra_args = list(X = X, psi = psi.huber, scaleEst = 'Huber', maxit = 100, N=N, p=p, return_summ = TRUE)
obs_summ_pilot = compute_statistics(y, extra_args)
obs_summ = compute_statistics1(y, extra_args)
dist_pilot = max(results$dist)
extra_args$obs_summ_pilot = obs_summ_pilot
extra_args$obs_summ = obs_summ
extra_args$dist_pilot = dist_pilot
results = smc_abc_generic_continue(results$theta,1000,0.5,0.01,prior_sim_trans,prior_eval,distance1,distance_pilot1,extra_args)
save(results, file = "results_summ1_continue.RData")
